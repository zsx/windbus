----------------------------------------
Windows port of the freedesktop.org D-Bus
----------------------------------------

Until the merge with the official D-Bus this is
the home of the Windows specific changes.

Build
-----

1. Install your prefered compiler
	- Mingw from www.mingw.org 
	- Visual C++ 2005 Express/Studio
2. Install win32libs packages from 
		http://www.abi-neuhaus.de/chris/win32libs/
   into a subdir win32libs in your program installation eg c:\Programme\win32libs (german) 
   or "c:\Program Files\win32libs" (english) 
3. download and install the most recent CMake version from http://www.cmake.org/files/
4. apply DBus-win32.patch: 'patch -p0 -i DBus-win32.patch'
5. open command shell and run in the created build folder which resides side by side 
   to the D-Bus sources:
   	- for mingw: 
		cmake -G "MinGW Makefiles" <options> ..\trunk\cmake
	- for Visual C++
		cmake ..\trunk\cmake
7. build


Tests
-----
(when build with the Visual C++ IDE the *.exe files are 
in the bin/Debug and bin/Release folder)

 - dbus library check 
		bin\dbus-test.exe .\test\data
	
 - bus daemon check 
		bin\bus-test.exe .\test\data

 - check available names 
		bin\test_names.exe 

 - check if dbus-daemon is accessable 
		bin\dbus-send.exe --session --type=method_call --print-reply --dest=org.freedesktop.DBus / org.freedesktop.DBus.ListNames method return sender=org.freedesktop.DBus -> dest=:1.4 array [ 	      string "org.freedesktop.DBus"string ":1.4"] 
		
 - start dbus-daemon
		* set DBUS_VERBOSE=0  (=1 for getting debug infos)
		* start bin\dbus-daemon --session
		* bin\dbus-send.exe  --dest=org.freedesktop.DBus --print-reply --type=method_call / org.freedesktop.DBus.StartServiceByName string:org.freedesktop.DBus.TestSuiteEchoService  uint32:455 method return sender=org.freedesktop.DBus -> dest=:1.8 uint32 2



Some build options
-------------
    key                        description                            default value
    ---                        -----------                            -------------
DBUS_USE_EXPAT              "Use expat (== ON) or libxml2 (==OFF)         OFF
DBUS_DISABLE_ASSERTS        "Disable assertion checking"                  OFF
DBUS_BUILD_TESTS            "enable unit test code"                       ON
DBUS_ENABLE_ANSI            "enable -ansi -pedantic gcc flags"            OFF
DBUS_ENABLE_GCOV            "compile with coverage profiling 
                             instrumentation (gcc only)"                  OFF
DBUS_ENABLE_VERBOSE_MODE    "support verbose debug mode"                  ON
DBUS_DISABLE_CHECKS         "Disable public API sanity checking"          OFF
DBUS_INSTALL_SYSTEM_LIBS    "install required system libraries 
                             (mingw: libxml2, libiconv, mingw10)"         OFF




Developers
----------

Most files are a checkout of the official freedesktop.org DBus.

Don't touch these files which are managed by CVS.

Only commit changes to  *-win.h, *-win.c, Readme.win and files in the cmake folder.

Move all patches of CVS managed files to 'DBus-win32.patch'.

Apply patch by:
	patch -p0 -i DBus-win32.patch

Extract changes by:
	svn diff >> temp.diff 

The advantage of this approach is that you can diff against
the CVS version of DBus without network access. It is also
simple to sync with the freedesktop version:
	cvs -z9 up *
	svn ci -"sync with freedesktop.org cvs version"


Use the following commands for a complete update cycle
 - svn revert -R *
 - cvs -z9 up *
 - patch -p0 -i DBus-win32.patch
 - compile and change windows related code
 - cvs -z9 diff -uBb > tmp.diff
 - svn revert -R *
 - copy tmp.diff DBus-win32.patch
 - cvs -z9 up *
 - svn ci -m "sync with cvs" 


Running the tests in Visual Studio:

 To successfully run the tests by the IDE you must add
 the FULL patch to test\data in your build directory
 (e.g. c:\dbus\build\test\data)  
 in something like 
  -> Project Settings
    -> Debugging
       -> Command line arguments
    
    
       
FAQ
---

- How is the WinDBus code synchronized with the main D-Bus project? 

The winDBus is located in an svn repository 
(see http://windbus.svn.sourceforge.net/viewvc/windbus/), which contains the
actual main dbus sources  and the  win32 changes  to have a full working
win32 code base. The main dbus code is merged in from time to time to be
in sync. We have a cvs write account to the main dbus, so we are able to  
check in changes by ourself after to be verified over the dbus bugtracker 
or mailing list, see http://www.freedesktop.org/wiki/Software_2fdbus


- How much work remains till WinDBus can be merged with the main project?

There are some patches outstanding and the most effort is required in
discussions with the main dbus team how to implement some parts. One of
the main dbus team estimated the open work to one fulltime week.
http://lists.freedesktop.org/archives/dbus/2006-November/006264.html

I assume they will answer ALL your questions, and they are very
interested in fully supporting win32.


- How far is WinDBus from being usable for production ?
dbus comes with a test suite which is used on unix to guarantate
production quality and this test suite runs mostly. There are some 
test not running and we need help to get them running.

In the pratice I and some other people are using dbus for at least more
than a half year in conjunction with kde on windows without any problems.


- On UNIX D-Bus uses UNIX sockets to communicate (correct me if I'm wrong). 
  What is used on Windows ?
  
tcp sockets, there are some efforts to get named pipe running, but some
design problems of the win32 api, we are not able to solve without
bigger changes to the dbus code base let us stop this effort.


- Do you have any clue if WinDBus can run in a Windows CE environment?

I was told that windows ce does not have posix function
open/close/select/... and dbus code uses such function in some area.


- Do you know if the C++ binding made by OpenWengo will be easily portable to Windows?

We have already ported the OpenWengo dbus-c++ binding, see in svn
mentioned above. The related test applicationa are running well.




TODO
----

February 2007:

- all changes of DBus-win32.patch 
  should become part of the official D-Bus code
  
- all code currently disabled by DBUS_WIN_FIXME should work
  
- clean up:
    * bus/bus-service-win.c
    * bus/dir-watch.c
    * dbus/dbus-spawn-win.c
    * dbus/dbus-sysdeps-util-win.c
    * dbus/dbus-sysdeps-win.c


see also:
http://lists.freedesktop.org/archives/dbus/2006-July/005076.html

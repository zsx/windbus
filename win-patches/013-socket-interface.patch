Index: bus/main.c
===================================================================
--- bus/main.c	(Revision 298)
+++ bus/main.c	(Arbeitskopie)
@@ -51,7 +51,7 @@
 #endif /* DBUS_BUS_ENABLE_DNOTIFY_ON_LINUX  */
     case SIGHUP:
       _dbus_string_init_const (&str, "foo");
-      if (!_dbus_write (reload_pipe[RELOAD_WRITE_END], &str, 0, 1))
+      if (!_dbus_write_socket (reload_pipe[RELOAD_WRITE_END], &str, 0, 1))
 	{
 	  _dbus_warn ("Unable to write to reload pipe.\n");
 	  exit (1);
@@ -150,7 +150,7 @@
   DBusError error;
   DBusString str;
   _dbus_string_init (&str);
-  if (_dbus_read (reload_pipe[RELOAD_READ_END], &str, 1) != 1)
+  if (_dbus_read_socket (reload_pipe[RELOAD_READ_END], &str, 1) != 1)
     {
       _dbus_warn ("Couldn't read from reload pipe.\n");
       exit (1);
Index: bus/bus.c
===================================================================
--- bus/bus.c	(Revision 298)
+++ bus/bus.c	(Arbeitskopie)
@@ -630,7 +630,7 @@
         }
 
       bytes = _dbus_string_get_length (&addr);
-      if (_dbus_write (print_addr_fd, &addr, 0, bytes) != bytes)
+      if (_dbus_write_socket (print_addr_fd, &addr, 0, bytes) != bytes)
         {
           dbus_set_error (error, DBUS_ERROR_FAILED,
                           "Printing message bus address: %s\n",
@@ -640,7 +640,7 @@
         }
 
       if (print_addr_fd > 2)
-        _dbus_close (print_addr_fd, NULL);
+        _dbus_close_socket (print_addr_fd, NULL);
 
       _dbus_string_free (&addr);
     }
@@ -731,7 +731,7 @@
         }
 
       bytes = _dbus_string_get_length (&pid);
-      if (_dbus_write (print_pid_fd, &pid, 0, bytes) != bytes)
+      if (_dbus_write_socket (print_pid_fd, &pid, 0, bytes) != bytes)
         {
           dbus_set_error (error, DBUS_ERROR_FAILED,
                           "Printing message bus PID: %s\n",
@@ -741,7 +741,7 @@
         }
 
       if (print_pid_fd > 2)
-        _dbus_close (print_pid_fd, NULL);
+        _dbus_close_socket (print_pid_fd, NULL);
       
       _dbus_string_free (&pid);
     }
Index: dbus/dbus-server-debug-pipe.c
===================================================================
--- dbus/dbus-server-debug-pipe.c	(Revision 298)
+++ dbus/dbus-server-debug-pipe.c	(Arbeitskopie)
@@ -260,8 +260,8 @@
                                                  NULL, &address);
   if (client_transport == NULL)
     {
-      _dbus_close (client_fd, NULL);
-      _dbus_close (server_fd, NULL);
+      _dbus_close_socket (client_fd, NULL);
+      _dbus_close_socket (server_fd, NULL);
       dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
       _dbus_string_free (&address);
       return NULL;
@@ -276,7 +276,7 @@
   if (server_transport == NULL)
     {
       _dbus_transport_unref (client_transport);
-      _dbus_close (server_fd, NULL);
+      _dbus_close_socket (server_fd, NULL);
       dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
       return NULL;
     }
Index: dbus/dbus-sysdeps-util-unix.c
===================================================================
--- dbus/dbus-sysdeps-util-unix.c	(Revision 298)
+++ dbus/dbus-sysdeps-util-unix.c	(Arbeitskopie)
@@ -152,7 +152,7 @@
 	    }
 	  
 	  bytes = _dbus_string_get_length (&pid);
-	  if (_dbus_write (print_pid_fd, &pid, 0, bytes) != bytes)
+	  if (_dbus_write_socket (print_pid_fd, &pid, 0, bytes) != bytes)
 	    {
 	      dbus_set_error (error, DBUS_ERROR_FAILED,
 			      "Printing message bus PID: %s\n",
Index: dbus/dbus-server-unix.c
===================================================================
--- dbus/dbus-server-unix.c	(Revision 298)
+++ dbus/dbus-server-unix.c	(Arbeitskopie)
@@ -102,7 +102,7 @@
   transport = _dbus_transport_new_for_fd (client_fd, &server->guid_hex, NULL);
   if (transport == NULL)
     {
-      _dbus_close (client_fd, NULL);
+      _dbus_close_socket (client_fd, NULL);
       SERVER_UNLOCK (server);
       return FALSE;
     }
@@ -219,7 +219,7 @@
       unix_server->watch = NULL;
     }
   
-  _dbus_close (unix_server->fd, NULL);
+  _dbus_close_socket (unix_server->fd, NULL);
   unix_server->fd = -1;
 
   if (unix_server->socket_name != NULL)
@@ -373,7 +373,7 @@
   return server;
 
  failed_2:
-  _dbus_close (listen_fd, NULL);
+  _dbus_close_socket (listen_fd, NULL);
  failed_1:
   dbus_free (path_copy);
  failed_0:
@@ -436,7 +436,7 @@
   if (server == NULL)
     {
       dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
-      _dbus_close (listen_fd, NULL);
+      _dbus_close_socket (listen_fd, NULL);
       _dbus_string_free (&address);
       return NULL;
     }
Index: dbus/dbus-spawn.c
===================================================================
--- dbus/dbus-spawn.c	(Revision 298)
+++ dbus/dbus-spawn.c	(Arbeitskopie)
@@ -276,13 +276,13 @@
            * a hangup and then the babysitter will
            * quit itself.
            */
-          _dbus_close (sitter->socket_to_babysitter, NULL);
+          _dbus_close_socket (sitter->socket_to_babysitter, NULL);
           sitter->socket_to_babysitter = -1;
         }
 
       if (sitter->error_pipe_from_child >= 0)
         {
-          _dbus_close (sitter->error_pipe_from_child, NULL);
+          _dbus_close_socket (sitter->error_pipe_from_child, NULL);
           sitter->error_pipe_from_child = -1;
         }
 
@@ -470,7 +470,7 @@
 close_socket_to_babysitter (DBusBabysitter *sitter)
 {
   _dbus_verbose ("Closing babysitter\n");
-  _dbus_close (sitter->socket_to_babysitter, NULL);
+  _dbus_close_socket (sitter->socket_to_babysitter, NULL);
   sitter->socket_to_babysitter = -1;
 }
 
@@ -478,7 +478,7 @@
 close_error_pipe_from_child (DBusBabysitter *sitter)
 {
   _dbus_verbose ("Closing child error\n");
-  _dbus_close (sitter->error_pipe_from_child, NULL);
+  _dbus_close_socket (sitter->error_pipe_from_child, NULL);
   sitter->error_pipe_from_child = -1;
 }
 
@@ -753,7 +753,7 @@
     return -1;
   else
     {
-      ret = _dbus_close (*fd, NULL);
+      ret = _dbus_close_socket (*fd, NULL);
       *fd = -1;
     }
 
Index: dbus/dbus-sysdeps-unix.c
===================================================================
--- dbus/dbus-sysdeps-unix.c	(Revision 298)
+++ dbus/dbus-sysdeps-unix.c	(Arbeitskopie)
@@ -75,8 +75,88 @@
  * @addtogroup DBusInternalsUtils
  * @{
  */
+ 
+/**
+ * Generic IO functions
+ * 
+ */
 
+static dbus_bool_t 
+_dbus_close     (int              fd,
+                 DBusError        *error);
+static int 
+_dbus_read      (int               fd,
+                 DBusString       *buffer,
+                 int               count);
+static int 
+_dbus_write     (int               fd,
+                 const DBusString *buffer,
+                 int               start,
+                 int               len);
+static int 
+_dbus_write_two (int               fd,
+                 const DBusString *buffer1,
+                 int               start1,
+                 int               len1,
+                 const DBusString *buffer2,
+                 int               start2,
+                 int               len2);
+
+
 /**
+ * Socket interface
+ *
+ */
+
+dbus_bool_t
+_dbus_open_socket (int              *fd,
+                   int               domain,
+                   int               type,
+                   int               protocol)
+{
+  *fd = socket (domain, type, protocol);
+  return fd >= 0;
+}
+
+dbus_bool_t 
+_dbus_close_socket (int               fd,
+                    DBusError        *error)
+{
+  return _dbus_close (fd, error);
+}
+
+int
+_dbus_read_socket (int               fd,
+                   DBusString       *buffer,
+                   int               count)
+{
+  return _dbus_read (fd, buffer, count);
+}
+
+int
+_dbus_write_socket (int               fd,
+                    const DBusString *buffer,
+                    int               start,
+                    int               len)
+{
+  return _dbus_write (fd, buffer, start, len);
+}
+
+int
+_dbus_write_socket_two (int               fd,
+                        const DBusString *buffer1,
+                        int               start1,
+                        int               len1,
+                        const DBusString *buffer2,
+                        int               start2,
+                        int               len2)
+{
+	return _dbus_write_two (fd, buffer1, start1, len1,
+	                            buffer2, start2, len2);
+}
+
+
+/**
  * Thin wrapper around the read() system call that appends
  * the data it reads to the DBusString buffer. It appends
  * up to the given count, and returns the same value
@@ -89,7 +169,7 @@
  * @param count the amount of data to read
  * @returns the number of bytes read or -1
  */
-int
+static int
 _dbus_read (int               fd,
             DBusString       *buffer,
             int               count)
@@ -149,7 +229,7 @@
  * @param len the number of bytes to try to write
  * @returns the number of bytes written or -1 on error
  */
-int
+static int
 _dbus_write (int               fd,
              const DBusString *buffer,
              int               start,
@@ -195,7 +275,7 @@
  * @param len2 number of bytes to write in second buffer
  * @returns total bytes written from both buffers, or -1 on error
  */
-int
+static int
 _dbus_write_two (int               fd,
                  const DBusString *buffer1,
                  int               start1,
@@ -306,9 +386,8 @@
   _dbus_verbose ("connecting to unix socket %s abstract=%d\n",
                  path, abstract);
   
-  fd = socket (PF_UNIX, SOCK_STREAM, 0);
   
-  if (fd < 0)
+  if (!_dbus_open_socket (&fd, PF_UNIX, SOCK_STREAM, 0))
     {
       dbus_set_error (error,
                       _dbus_error_from_errno (errno),
@@ -413,9 +492,7 @@
   _dbus_verbose ("listening on unix socket %s abstract=%d\n",
                  path, abstract);
   
-  listen_fd = socket (PF_UNIX, SOCK_STREAM, 0);
-  
-  if (listen_fd < 0)
+  if (!_dbus_open_socket (&listen_fd, PF_UNIX, SOCK_STREAM, 0))
     {
       dbus_set_error (error, _dbus_error_from_errno (errno),
                       "Failed to create socket \"%s\": %s",
@@ -540,10 +617,9 @@
   struct in_addr *haddr;
 
   _DBUS_ASSERT_ERROR_IS_CLEAR (error);
+ 
   
-  fd = socket (AF_INET, SOCK_STREAM, 0);
-  
-  if (fd < 0)
+  if (!_dbus_open_socket (&fd, AF_INET, SOCK_STREAM, 0))
     {
       dbus_set_error (error,
                       _dbus_error_from_errno (errno),
@@ -620,9 +696,8 @@
 
   _DBUS_ASSERT_ERROR_IS_CLEAR (error);
   
-  listen_fd = socket (AF_INET, SOCK_STREAM, 0);
   
-  if (listen_fd < 0)
+  if (!_dbus_open_socket (&listen_fd, AF_INET, SOCK_STREAM, 0))
     {
       dbus_set_error (error, _dbus_error_from_errno (errno),
                       "Failed to create socket \"%s:%d\": %s",
@@ -1958,7 +2033,7 @@
  * @param error error object
  * @returns #FALSE if error set
  */
-dbus_bool_t
+static dbus_bool_t
 _dbus_close (int        fd,
              DBusError *error)
 {
Index: dbus/dbus-transport-unix.c
===================================================================
--- dbus/dbus-transport-unix.c	(Revision 298)
+++ dbus/dbus-transport-unix.c	(Arbeitskopie)
@@ -250,8 +250,8 @@
 
   _dbus_auth_get_buffer (transport->auth, &buffer);
   
-  bytes_read = _dbus_read (unix_transport->fd,
-                           buffer, unix_transport->max_bytes_read_per_iteration);
+  bytes_read = _dbus_read_socket (unix_transport->fd,
+                                  buffer, unix_transport->max_bytes_read_per_iteration);
 
   _dbus_auth_return_buffer (transport->auth, buffer,
                             bytes_read > 0 ? bytes_read : 0);
@@ -305,9 +305,9 @@
                                      &buffer))
     return FALSE;
   
-  bytes_written = _dbus_write (unix_transport->fd,
-                               buffer,
-                               0, _dbus_string_get_length (buffer));
+  bytes_written = _dbus_write_socket (unix_transport->fd,
+                                      buffer,
+                                      0, _dbus_string_get_length (buffer));
 
   if (bytes_written > 0)
     {
@@ -556,10 +556,10 @@
 #endif
           
           bytes_written =
-            _dbus_write (unix_transport->fd,
-                         &unix_transport->encoded_outgoing,
-                         unix_transport->message_bytes_written,
-                         total_bytes_to_write - unix_transport->message_bytes_written);
+            _dbus_write_socket (unix_transport->fd,
+                                &unix_transport->encoded_outgoing,
+                                unix_transport->message_bytes_written,
+                                total_bytes_to_write - unix_transport->message_bytes_written);
         }
       else
         {
@@ -573,21 +573,21 @@
           if (unix_transport->message_bytes_written < header_len)
             {
               bytes_written =
-                _dbus_write_two (unix_transport->fd,
-                                 header,
-                                 unix_transport->message_bytes_written,
-                                 header_len - unix_transport->message_bytes_written,
-                                 body,
-                                 0, body_len);
+                _dbus_write_socket_two (unix_transport->fd,
+                                        header,
+                                        unix_transport->message_bytes_written,
+                                        header_len - unix_transport->message_bytes_written,
+                                        body,
+                                        0, body_len);
             }
           else
             {
               bytes_written =
-                _dbus_write (unix_transport->fd,
-                             body,
-                             (unix_transport->message_bytes_written - header_len),
-                             body_len -
-                             (unix_transport->message_bytes_written - header_len));
+                _dbus_write_socket (unix_transport->fd,
+                                    body,
+                                    (unix_transport->message_bytes_written - header_len),
+                                    body_len -
+                                    (unix_transport->message_bytes_written - header_len));
             }
         }
 
@@ -682,9 +682,9 @@
       if (_dbus_string_get_length (&unix_transport->encoded_incoming) > 0)
         bytes_read = _dbus_string_get_length (&unix_transport->encoded_incoming);
       else
-        bytes_read = _dbus_read (unix_transport->fd,
-                                 &unix_transport->encoded_incoming,
-                                 unix_transport->max_bytes_read_per_iteration);
+        bytes_read = _dbus_read_socket (unix_transport->fd,
+                                        &unix_transport->encoded_incoming,
+                                        unix_transport->max_bytes_read_per_iteration);
 
       _dbus_assert (_dbus_string_get_length (&unix_transport->encoded_incoming) ==
                     bytes_read);
@@ -719,8 +719,8 @@
       _dbus_message_loader_get_buffer (transport->loader,
                                        &buffer);
       
-      bytes_read = _dbus_read (unix_transport->fd,
-                               buffer, unix_transport->max_bytes_read_per_iteration);
+      bytes_read = _dbus_read_socket (unix_transport->fd,
+                                      buffer, unix_transport->max_bytes_read_per_iteration);
       
       _dbus_message_loader_return_buffer (transport->loader,
                                           buffer,
@@ -882,7 +882,7 @@
   
   free_watches (transport);
   
-  _dbus_close (unix_transport->fd, NULL);
+  _dbus_close_socket (unix_transport->fd, NULL);
   unix_transport->fd = -1;
 }
 
@@ -1241,7 +1241,7 @@
   return transport;
 
  failed_1:
-  _dbus_close (fd, NULL);
+  _dbus_close_socket (fd, NULL);
  failed_0:
   _dbus_string_free (&address);
   return NULL;
@@ -1301,7 +1301,7 @@
   if (transport == NULL)
     {
       dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
-      _dbus_close (fd, NULL);
+      _dbus_close_socket (fd, NULL);
       _dbus_string_free (&address);
       fd = -1;
     }
Index: dbus/dbus-sysdeps.h
===================================================================
--- dbus/dbus-sysdeps.h	(Revision 298)
+++ dbus/dbus-sysdeps.h	(Arbeitskopie)
@@ -74,20 +74,6 @@
 dbus_bool_t _dbus_setenv (const char *varname,
 			  const char *value);
 
-int _dbus_read      (int               fd,
-                     DBusString       *buffer,
-                     int               count);
-int _dbus_write     (int               fd,
-                     const DBusString *buffer,
-                     int               start,
-                     int               len);
-int _dbus_write_two (int               fd,
-                     const DBusString *buffer1,
-                     int               start1,
-                     int               len1,
-                     const DBusString *buffer2,
-                     int               start2,
-                     int               len2);
 
 typedef unsigned long dbus_pid_t;
 typedef unsigned long dbus_uid_t;
@@ -101,7 +87,40 @@
 #define DBUS_UID_FORMAT "%lu"
 #define DBUS_GID_FORMAT "%lu"
 
+
 /**
+ * Socket interface
+ *
+ *  @todo Use for the file descriptors a struct
+ *           - struct DBusSocket{ int d; }; -
+ *        instead of int to get type-safety which 
+ *        will be checked by the compiler.
+ * 
+ */
+
+dbus_bool_t _dbus_open_socket      (int              *fd,
+                                    int               domain, 
+                                    int               type, 
+                                    int               protocol);
+dbus_bool_t _dbus_close_socket     (int               fd,
+                                    DBusError        *error);
+int         _dbus_read_socket      (int               fd,
+                                    DBusString       *buffer,
+                                    int               count);
+int         _dbus_write_socket     (int               fd,
+                                    const DBusString *buffer,
+                                    int               start,
+                                    int               len);
+int         _dbus_write_socket_two (int               fd,
+                                    const DBusString *buffer1,
+                                    int               start1,
+                                    int               len1,
+                                    const DBusString *buffer2,
+                                    int               start2,
+                                    int               len2);
+
+
+/**
  * Struct representing socket credentials
  */
 typedef struct
@@ -223,7 +242,10 @@
 void _dbus_get_current_time (long *tv_sec,
                              long *tv_usec);
 
-
+/**
+ * File/directory interface
+ */
+dbus_bool_t _dbus_file_exists         (const char       *file);
 dbus_bool_t _dbus_file_get_contents   (DBusString       *str,
                                        const DBusString *filename,
                                        DBusError        *error);
@@ -258,6 +280,13 @@
 dbus_bool_t  _dbus_check_dir_is_private_to_user    (DBusString *dir,
                                                     DBusError *error);
 
+void _dbus_fd_set_close_on_exec (int fd);
+
+const char* _dbus_get_tmpdir      (void);
+
+/**
+ * Random numbers 
+ */
 void        _dbus_generate_pseudorandom_bytes_buffer (char *buffer,
                                                       int   n_bytes);
 void        _dbus_generate_random_bytes_buffer (char       *buffer,
@@ -272,7 +301,6 @@
 
 void _dbus_disable_sigpipe (void);
 
-void _dbus_fd_set_close_on_exec (int fd);
 
 void _dbus_exit (int code) _DBUS_GNUC_NORETURN;
 
@@ -302,8 +330,6 @@
                                     int              *fd2,
                                     dbus_bool_t       blocking,
                                     DBusError        *error);
-dbus_bool_t _dbus_close            (int               fd,
-                                    DBusError        *error);
 
 void        _dbus_print_backtrace  (void);
 
@@ -322,10 +348,8 @@
 void _dbus_set_signal_handler (int               sig,
                                DBusSignalHandler handler);
 
-dbus_bool_t _dbus_file_exists     (const char *file);
 dbus_bool_t _dbus_user_at_console (const char *username,
                                    DBusError  *error);
-const char* _dbus_get_tmpdir      (void);
 
 /* Define DBUS_VA_COPY() to do the right thing for copying va_list variables. 
  * config.h may have already defined DBUS_VA_COPY as va_copy or __va_copy. 

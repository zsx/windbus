Index: dbus/dbus-string.c
===================================================================
--- dbus/dbus-string.c	(revision 141)
+++ dbus/dbus-string.c	(working copy)
@@ -1790,6 +1790,72 @@
 }
 
 /**
+ * Finds end of line ("\r\n","\r","\n") in the string,
+ * returning #TRUE and filling in the byte index
+ * where the eol string was found, if it was found.
+ * Returns #FALSE if eol wasn't found.
+ *
+ * @param str the string
+ * @param start where to start looking
+ * @param found return location for where it was found, or #NULL
+ * @param found_len return length of found eol string
+ * @returns #TRUE if found
+ */
+dbus_bool_t
+_dbus_string_find_eol (const DBusString *str,
+                   int               start,
+                   int              *found,
+                   int              *found_len)
+{
+  int i;
+
+  DBUS_CONST_STRING_PREAMBLE (str);
+  _dbus_assert (start <= real->len);
+  _dbus_assert (start >= 0);
+  
+  i = start;
+  while (i < real->len)
+    {
+      if (real->str[i] == '\r') 
+        {
+          if ((i+1) < real->len && real->str[i+1] == '\n') /* "\r\n" */
+            {
+              if (found) 
+                *found = i;
+              if (found_len)
+                *found_len = 2;
+              return TRUE;
+            } 
+          else /* only "\r" */
+            {
+              if (found) 
+                *found = i;
+              if (found_len)
+                *found_len = 1;
+              return TRUE;
+            }
+        } 
+      else if (real->str[i] == '\n')  /* only "\n" */
+        {
+          if (found) 
+            *found = i;
+          if (found_len)
+            *found_len = 1;
+          return TRUE;
+        }      
+      ++i;
+    }
+
+  if (found)
+    *found = real->len;
+
+  if (found_len)
+    *found_len = 0;
+  
+  return FALSE;
+}
+
+/**
  * Finds the given substring in the string,
  * up to a certain position,
  * returning #TRUE and filling in the byte index
Index: dbus/dbus-string.h
===================================================================
--- dbus/dbus-string.h	(revision 141)
+++ dbus/dbus-string.h	(working copy)
@@ -215,6 +215,10 @@
                                                   int                start,
                                                   const char        *substr,
                                                   int               *found);
+dbus_bool_t   _dbus_string_find_eol               (const DBusString *str,
+                                                  int               start,
+                                                  int               *found,
+                                                  int               *found_len);
 dbus_bool_t   _dbus_string_find_to               (const DBusString  *str,
                                                   int                start,
                                                   int                end,
Index: bus/desktop-file.c
===================================================================
--- bus/desktop-file.c	(revision 141)
+++ bus/desktop-file.c	(working copy)
@@ -360,15 +360,15 @@
 static void
 parse_comment_or_blank (BusDesktopFileParser *parser)
 {
-  int line_end;
+  int line_end, eol_len;
   
-  if (!_dbus_string_find (&parser->data, parser->pos, "\n", &line_end))
+  if (!_dbus_string_find_eol (&parser->data, parser->pos, &line_end, &eol_len))
     line_end = parser->len;
 
   if (line_end == parser->len)
     parser->pos = parser->len;
   else
-    parser->pos = line_end + 1;
+    parser->pos = line_end + eol_len;
   
   parser->line_num += 1;
 }
@@ -393,12 +393,12 @@
 static dbus_bool_t
 parse_section_start (BusDesktopFileParser *parser, DBusError *error)
 {
-  int line_end;
+  int line_end, eol_len;
   char *section_name;
 
   _DBUS_ASSERT_ERROR_IS_CLEAR (error);
-  
-  if (!_dbus_string_find (&parser->data, parser->pos, "\n", &line_end))
+    
+  if (!_dbus_string_find_eol (&parser->data, parser->pos, &line_end, &eol_len))
     line_end = parser->len;
   
   if (line_end - parser->pos <= 2 ||
@@ -436,7 +436,7 @@
   if (line_end == parser->len)
     parser->pos = parser->len;
   else
-    parser->pos = line_end + 1;
+    parser->pos = line_end + eol_len;
   
   parser->line_num += 1;
 
@@ -448,7 +448,7 @@
 static dbus_bool_t
 parse_key_value (BusDesktopFileParser *parser, DBusError *error)
 {
-  int line_end;
+  int line_end, eol_len;
   int key_start, key_end;
   int value_start;
   int p;
@@ -458,7 +458,7 @@
 
   _DBUS_ASSERT_ERROR_IS_CLEAR (error);
   
-  if (!_dbus_string_find (&parser->data, parser->pos, "\n", &line_end))
+  if (!_dbus_string_find_eol (&parser->data, parser->pos, &line_end, &eol_len))
     line_end = parser->len;
   
   p = parser->pos;
@@ -481,7 +481,7 @@
       if (line_end == parser->len)
 	parser->pos = parser->len;
       else
-	parser->pos = line_end + 1;
+	parser->pos = line_end + eol_len;
 	  
       parser->line_num += 1;
 
@@ -560,7 +560,7 @@
   if (line_end == parser->len)
     parser->pos = parser->len;
   else
-    parser->pos = line_end + 1;
+    parser->pos = line_end + eol_len;
   
   parser->line_num += 1;
 
Index: dbus/dbus-string-util.c
===================================================================
--- dbus/dbus-string-util.c	(revision 141)
+++ dbus/dbus-string-util.c	(working copy)
@@ -739,7 +739,27 @@
   test_roundtrips (test_hex_roundtrip);
   
   _dbus_string_free (&str);
-  
+
+  {
+  int found,found_len;
+  _dbus_string_init_const (&str, "012\r\n567\n90");
+
+  if (!_dbus_string_find_eol(&str, 0, &found, &found_len))
+    _dbus_assert_not_reached ("Did not find '\\r\\n'");
+  if (found != 3 || found_len != 2)
+    _dbus_assert_not_reached ("invalid return values");
+
+  if (!_dbus_string_find_eol(&str, 5, &found, &found_len))
+    _dbus_assert_not_reached ("Did not find '\\n'");
+  if (found != 8 || found_len != 1)
+    _dbus_assert_not_reached ("invalid return values");
+  	
+  if (_dbus_string_find_eol(&str, 9, NULL, NULL))
+    _dbus_assert_not_reached ("Found not expected '\\n'");
+
+  _dbus_string_free (&str);
+  }
+
   return TRUE;
 }
 
